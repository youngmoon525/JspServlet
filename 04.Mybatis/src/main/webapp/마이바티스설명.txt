-퍼시스턴스 프레임워크
-데이터베이스와 애플리케이션을 연결하여 데이터 베이스 작업을 하고 관리하는 도구 라이브러리 모음을 의미함.
-ORM(Object-Relational Mapping): 관계형 데이터베이스를 자바의 객체 형태로 사용하는 기법
-데이터베이스 연동 관리(Connection Pool): 연결 , 트랜잭션 , Sql 생성..등등의 처리
-쿼리 생성 및 최적화 
-객체의 상태 변화 추적

-Hibernate, JPA(Java Persistence API) , "Mybatis" , Entity FrameWork


-key:JDBC가 반드시 있어야함.(ojdbc)
-Hibernate : ORM 기반의 퍼시스턴스 프레워임워크 . 데이터베이스를 객체지향 프로그래밍 언어와 상호작용하게 만듬.
		     캐싱 , 검증 , 내장 쿼리 , 내장 언어 및 함수 제공 등 다양한 기능이 많음.
		     
		     단점 : 1.복잡성: 초기 설정이나 복잡하고 모호한 개념 매핑 설정 등이 필요함.
		     	   2.오버헤드: 가끔은 너무 많은 기능이 제공되어 사용하지 않는 기능이 메모리에 올라와 있어 속도저하나 충돌.
		     	   

-JPA(Java Persistence API) : 표준화 API로 여러 구현체 ( Hibernate , EclipseLink)를 선택 사용 가능
							 객체지향적 접근성: 객체와 데이터베이스 간의 매핑을 지원하여 객체지향적 프로그램이 가능
							 어노테이션 지원: 간단한 어노테이션으로 조인 등을 표현가능 
							 Java기반의 코드이기 때문에 데이터베이스 종류가 바뀌어도 바로 적용이 가능함.
							 		 
			 단점 : 기능제한 -> 인터페이스 기반이기 때문에 오라클 등의 고급 데이터베이스의 특성을 다루지 못함.
			 	   복잡한 쿼리: 복잡한 쿼리를 작성하면 JPA의 제약이 엄청나게 크게 다가옴.(동적쿼리 , ...)
			 	   
-Mybatis :개발자가 직접 SQL을 작성하고 제어를 하기 때문에 세밀한 제어나 복잡한 쿼리를 작성할때 유리함
			 SQL과 자바 코드가 분리가 되어있어 , 가독성이 높고 유지보수가 쉽다.
			 
			 단점 : 초기 설정이 까다로움 ( Hibernate > Mybatis > JPA ) 
			 	   Java코드로 사용하는 기능에 제약이 있을 수 있음.
			 	   
			 	   
마이바티스 세팅하기
1.maven 저장소에서 "JDBC" & "mybatis"를 pom.xml에 넣어주기 ( mybatis는 OracleDriver(JDBC)를 이용해서 기능 동작 )
	<!--Java에서 Oracle 접속용 lib(api) -->
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc11</artifactId>
			<version>21.8.0.0</version>
		</dependency>
		<!-- 퍼시스턴스 프레임워크 마이바티스 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.6</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

2.마이바티스 공식 문서의 설명서를 참고하여 환경설정을 해준다. ( https://mybatis.org/mybatis-3/ko/getting-started.html)

	2.1. mybatis-config.xml을 가져와서 붙여넣기 ( 접속 정보 등, Connection에 이용 될 내용 + sqlmapper의 경로 등 )
	2.2. driver , url , user등의 정보는 직접 넣었음.
	2.3. sqlmapper의 경로가 복잡한데 줄여서 패키지를 만들고 , xml형태의 mapper를 복사해서 붙여넣기함.
	2.4. select 숫자 from dual을 통해 정확하게 select를 해오는지 테스트함.(환경 설정 테스트)
		2.4.1. 맵퍼는 namespace와 id로 쿼리를 식별함. ex)"testmapper"."select1"
	2.5. 가장 위에 있는 자바코드를 붙여넣기를 하고 임포트를 각각 해줌. ( = SqlSession이라는 작업을 만들어 내기 위함.)
	
3.주요 메소드

 3.1. 데이터 한 건의 조회 : sqlSession."selectOne"("namespace.id" , 필요하다면 파라메터 Object);
 	       여러 건의 조회: sqlSession."selectList"("namespace.id" , 필요하다면 파라메터 Object);
 	       추가 , 수정 , 삭제 동일 ( insert , update , delete )
 	       
 	  맵퍼 내부에서는 파라메터를 #{파라메터의 구분자} 또는 ${파라메터의 구분자}로 사용함.
 	  #{파라메터이름} ==> 원본 데이터의 타입을 유지시켜 String의 경우 'Oracle' ※ jstl에 $와 mybatis $,# 주의
 	  ${파라메터이름} ==> 원본 데이터의 타입이 아니라 글자 그대로 인식함.(컬럼) Oracle
 	       




			 	   		     	  
